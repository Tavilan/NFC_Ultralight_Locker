name: Build all FAPs (auto-discover)
on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup uFBT
        uses: flipperdevices/flipperzero-ufbt-action@v0.1.4
        id: ufbt
        with:
          sdk-channel: release   # pune 'dev' dacă Flipperul tău e pe firmware dev

      - name: Diagnose repo contents
        run: |
          echo "== PWD ==" && pwd
          echo "== Tree =="
          ls -la
          echo "== Find application.fam =="
          # listă absolută a tuturor application.fam
          find "$(pwd)" -type f -name "application.fam" -print | sed 's|^|FOUND: |'

      - name: Build all apps found
        run: |
          set -e
          ROOT="$(pwd)"
          MAPFILE=apps.txt
          # adună toate directoarele care conțin application.fam
          find "$ROOT" -type f -name "application.fam" -print > "$MAPFILE"

          if [ ! -s "$MAPFILE" ]; then
            echo "ERROR: niciun application.fam găsit. Verifică numele fișierului și locația."
            exit 2
          fi

          mkdir -p build-collect
          i=0
          while IFS= read -r fam; do
            dir="$(dirname "$fam")"
            echo "=== [$((++i))] Building in: $dir"
            ls -la "$dir" || true

            # list app(s) văzute de ufbt în acest dir
            (cd "$dir" && ufbt list || true)

            # build
            (cd "$dir" && ufbt update && ufbt build)

            # strânge .fap-urile raportate de action (path relativ)
            OUT="${{ steps.ufbt.outputs.fap-artifacts }}"
            if [ -n "$OUT" ] && [ -e "$dir/$OUT" ]; then
              cp -vr "$dir/$OUT" build-collect/ || true
            else
              # fallback: caută .fap în subdir-ul de build
              find "$dir" -type f -name "*.fap" -print -exec cp -v {} build-collect/ \;
            fi
          done < "$MAPFILE"

          echo "== Collected FAPs =="
          ls -la build-collect || true

      - name: Upload FAPs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: faps-${{ steps.ufbt.outputs.suffix }}
          path: build-collect
